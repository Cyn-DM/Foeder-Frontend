import { createHotContext as __vite__createHotContext } from "/@vite/client";import.meta.hot = __vite__createHotContext("/src/Authentication/AuthProvider.jsx");import __vite__cjsImport0_react_jsxDevRuntime from "/node_modules/.vite/deps/react_jsx-dev-runtime.js?v=1cc70104"; const jsxDEV = __vite__cjsImport0_react_jsxDevRuntime["jsxDEV"];
import RefreshRuntime from "/@react-refresh";
const inWebWorker = typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope;
let prevRefreshReg;
let prevRefreshSig;
if (import.meta.hot && !inWebWorker) {
  if (!window.__vite_plugin_react_preamble_installed__) {
    throw new Error("@vitejs/plugin-react can't detect preamble. Something is wrong. See https://github.com/vitejs/vite-plugin-react/pull/11#discussion_r430879201");
  }
  prevRefreshReg = window.$RefreshReg$;
  prevRefreshSig = window.$RefreshSig$;
  window.$RefreshReg$ = (type, id) => {
    RefreshRuntime.register(type, "C:/Fontys repos/Foeder/Foeder Frontend/Foeder-Frontend/Foeder-Frontend/src/Authentication/AuthProvider.jsx " + id);
  };
  window.$RefreshSig$ = RefreshRuntime.createSignatureFunctionForTransform;
}
var _s = $RefreshSig$(), _s2 = $RefreshSig$();
import __vite__cjsImport3_react from "/node_modules/.vite/deps/react.js?v=1cc70104"; const createContext = __vite__cjsImport3_react["createContext"]; const useContext = __vite__cjsImport3_react["useContext"]; const useEffect = __vite__cjsImport3_react["useEffect"]; const useState = __vite__cjsImport3_react["useState"];
import __vite__cjsImport4_propTypes from "/node_modules/.vite/deps/prop-types.js?v=1cc70104"; const PropTypes = __vite__cjsImport4_propTypes.__esModule ? __vite__cjsImport4_propTypes.default : __vite__cjsImport4_propTypes;
import { useNavigate } from "/node_modules/.vite/deps/react-router-dom.js?v=1cc70104";
import axios from "/node_modules/.vite/deps/axios.js?v=1cc70104";
import { jwtDecode } from "/node_modules/.vite/deps/jwt-decode.js?v=1cc70104";
const AuthContext = createContext(null);
export function AuthProvider({ children }) {
  _s();
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [user, setUser] = useState(null);
  let backendUrl = "https://localhost:7058/api";
  const axiosInstance = axios.create({
    baseURL: backendUrl,
    withCredentials: true
  });
  useEffect(() => {
    setAccessTokenFromRefresh();
  }, []);
  axiosInstance.interceptors.request.use(
    (config) => {
      const accessToken = localStorage.getItem("access_token");
      if (accessToken) {
        config.headers["Authorization"] = accessToken;
      } else {
        setAccessTokenFromRefresh();
      }
      return config;
    },
    (error) => Promise.reject(error)
  );
  AuthProvider.propTypes = {
    children: PropTypes.any
  };
  const createUser = (accessToken) => {
    let userInfo = jwtDecode(accessToken);
    console.log(userInfo);
    return {
      "name": userInfo.unique_name,
      "id": userInfo.Id,
      "email": userInfo.email,
      "householdId": userInfo.HouseholdId ?? void 0
    };
  };
  const login = (user2) => {
    setUser(user2);
    setIsAuthenticated(true);
  };
  const clearAccessToken = () => {
    if (localStorage.getItem("access_token")) {
      localStorage.removeItem("accessToken");
    }
  };
  const clearRefreshToken = () => {
    const skipIntercept = axios.create();
    skipIntercept.defaults.baseURL = backendUrl;
    skipIntercept.withCredentials = true;
    skipIntercept.get("/Auth/logout").catch((error) => console.log(error));
  };
  const logout = () => {
    setUser(null);
    setIsAuthenticated(false);
    clearAccessToken();
    clearRefreshToken();
  };
  const getAccessToken = () => {
    return localStorage.getItem("access_token");
  };
  const setAccessTokenLocalStorage = (accessToken) => {
    if (localStorage.getItem("access_token")) {
      localStorage.removeItem("access_token");
    }
    localStorage.setItem("access_token", `Bearer ${accessToken}`);
  };
  const setAccessTokenFromRefresh = () => {
    axios.get("/Auth/refresh", { withCredentials: true, baseURL: backendUrl }).then((response) => {
      setAccessTokenLocalStorage(response.data);
      const createdUser = createUser(response.data);
      login(createdUser);
    }).catch((error) => {
      if (error.response && error.response.status === 401) {
        logout();
      }
    });
  };
  const handleCredentialResponse = (response) => {
    const skipIntercept = axios.create();
    skipIntercept.defaults.baseURL = backendUrl;
    skipIntercept.defaults.withCredentials = true;
    skipIntercept.post(
      "/Auth/login",
      { CredentialResponse: response.credential }
    ).then((response2) => {
      setAccessTokenLocalStorage(response2.data);
      let user2 = createUser(response2.data);
      login(user2);
    }).catch((error) => console.error("Connection error:", error));
  };
  return /* @__PURE__ */ jsxDEV(AuthContext.Provider, { value: {
    isAuthenticated,
    setIsAuthenticated,
    user,
    createUser,
    login,
    logout,
    getAccessToken,
    setAccessToken: setAccessTokenFromRefresh,
    handleCredentialResponse,
    axiosInstance
  }, children }, void 0, false, {
    fileName: "C:/Fontys repos/Foeder/Foeder Frontend/Foeder-Frontend/Foeder-Frontend/src/Authentication/AuthProvider.jsx",
    lineNumber: 135,
    columnNumber: 5
  }, this);
}
_s(AuthProvider, "Cix+uXOU60jwVTrRl9ss+REDA3M=");
_c = AuthProvider;
export function UseAuth() {
  _s2();
  return useContext(AuthContext);
}
_s2(UseAuth, "gDsCjeeItUuvgOWf1v4qoK9RF6k=");
_c2 = UseAuth;
var _c, _c2;
$RefreshReg$(_c, "AuthProvider");
$RefreshReg$(_c2, "UseAuth");
if (import.meta.hot && !inWebWorker) {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
if (import.meta.hot && !inWebWorker) {
  RefreshRuntime.__hmr_import(import.meta.url).then((currentExports) => {
    RefreshRuntime.registerExportsForReactRefresh("C:/Fontys repos/Foeder/Foeder Frontend/Foeder-Frontend/Foeder-Frontend/src/Authentication/AuthProvider.jsx", currentExports);
    import.meta.hot.accept((nextExports) => {
      if (!nextExports) return;
      const invalidateMessage = RefreshRuntime.validateRefreshBoundaryAndEnqueueUpdate("C:/Fontys repos/Foeder/Foeder Frontend/Foeder-Frontend/Foeder-Frontend/src/Authentication/AuthProvider.jsx", currentExports, nextExports);
      if (invalidateMessage) import.meta.hot.invalidate(invalidateMessage);
    });
  });
}

//# sourceMappingURL=data:application/json;base64,